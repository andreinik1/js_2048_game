{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.score = 0;\n        this.state = \"idle\";\n        this.startButtonHasBeenClicked = false;\n        this.button = document.querySelector(\".start\");\n        this.gameActive = false;\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            key: \"updateDOMFromBoard\",\n            value: function updateDOMFromBoard() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    var value = this.board[row][col];\n                    var cell = document.querySelector(\".field-row:nth-child(\".concat(row + 1, \") .field-cell:nth-child(\").concat(col + 1, \")\"));\n                    if (cell) {\n                        cell.textContent = value ? value.toString() : \"\";\n                        cell.className = \"field-cell field-cell--\".concat(value || \"\");\n                    }\n                }\n                if (this.board.flat().includes(2048)) this.updateState(\"win\");\n            }\n        },\n        {\n            key: \"updateState\",\n            value: function updateState(newState) {\n                this.state = newState;\n            }\n        },\n        {\n            key: \"addScore\",\n            value: function addScore(value) {\n                this.score += value;\n                var scoreElement = document.querySelector(\".game-score\");\n                if (scoreElement) scoreElement.textContent = this.score;\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"initializeGame\",\n            value: function initializeGame() {\n                this.score = 0;\n                this.addScore(0);\n                this.hideMessages();\n                var cells = document.querySelectorAll(\".field-cell\");\n                cells.forEach(function(cell) {\n                    cell.textContent = \"\";\n                    cell.className = \"field-cell\";\n                });\n                this.spawnRandomNumber();\n                this.spawnRandomNumber();\n                this.updateDOMFromBoard();\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.updateState(\"playing\");\n                this.initializeGame();\n                this.startButtonHasBeenClicked = true;\n                if (this.button) {\n                    this.button.textContent = \"Restart\";\n                    this.button.classList.remove(\"start\");\n                    this.button.classList.add(\"restart\");\n                }\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.updateState(\"idle\");\n                this.gameActive = false;\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.score = 0;\n                this.addScore(0);\n                this.hideMessages();\n                this.updateDOMFromBoard();\n                if (this.button) {\n                    this.button.classList.remove(\"restart\");\n                    this.button.classList.add(\"start\");\n                    this.button.textContent = \"Start\";\n                }\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.state;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.state !== \"playing\") return false;\n                var hasChanged = false;\n                for(var row = 0; row < 4; row++){\n                    var merged = [\n                        false,\n                        false,\n                        false,\n                        false\n                    ];\n                    for(var col = 1; col < 4; col++)if (this.board[row][col] !== 0) {\n                        var currentCol = col;\n                        while(currentCol > 0){\n                            if (this.board[row][currentCol - 1] === 0) {\n                                this.board[row][currentCol - 1] = this.board[row][currentCol];\n                                this.board[row][currentCol] = 0;\n                                currentCol--;\n                                hasChanged = true;\n                            } else if (this.board[row][currentCol - 1] === this.board[row][currentCol] && !merged[currentCol - 1]) {\n                                this.board[row][currentCol - 1] *= 2;\n                                this.board[row][currentCol] = 0;\n                                merged[currentCol - 1] = true;\n                                this.addScore(this.board[row][currentCol - 1]);\n                                hasChanged = true;\n                                break;\n                            } else break;\n                        }\n                    }\n                }\n                if (hasChanged) this.spawnRandomNumber();\n                this.checkLoseCondition();\n                this.updateDOMFromBoard();\n                return hasChanged;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.state !== \"playing\") return false;\n                var hasChanged = false;\n                for(var row = 0; row < 4; row++){\n                    var merged = [\n                        false,\n                        false,\n                        false,\n                        false\n                    ];\n                    for(var col = 2; col >= 0; col--)if (this.board[row][col] !== 0) {\n                        var currentCol = col;\n                        while(currentCol < 3){\n                            if (this.board[row][currentCol + 1] === 0) {\n                                this.board[row][currentCol + 1] = this.board[row][currentCol];\n                                this.board[row][currentCol] = 0;\n                                currentCol++;\n                                hasChanged = true;\n                            } else if (this.board[row][currentCol + 1] === this.board[row][currentCol] && !merged[currentCol + 1]) {\n                                this.board[row][currentCol + 1] *= 2;\n                                this.board[row][currentCol] = 0;\n                                merged[currentCol + 1] = true;\n                                this.addScore(this.board[row][currentCol + 1]);\n                                hasChanged = true;\n                                break;\n                            } else break;\n                        }\n                    }\n                }\n                if (hasChanged) this.spawnRandomNumber();\n                this.checkLoseCondition();\n                this.updateDOMFromBoard();\n                return hasChanged;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.state !== \"playing\") return false;\n                var hasChanged = false;\n                for(var col = 0; col < 4; col++){\n                    var merged = [\n                        false,\n                        false,\n                        false,\n                        false\n                    ];\n                    for(var row = 1; row < 4; row++)if (this.board[row][col] !== 0) {\n                        var currentRow = row;\n                        while(currentRow > 0){\n                            if (this.board[currentRow - 1][col] === 0) {\n                                this.board[currentRow - 1][col] = this.board[currentRow][col];\n                                this.board[currentRow][col] = 0;\n                                currentRow--;\n                                hasChanged = true;\n                            } else if (this.board[currentRow - 1][col] === this.board[currentRow][col] && !merged[currentRow - 1]) {\n                                this.board[currentRow - 1][col] *= 2;\n                                this.board[currentRow][col] = 0;\n                                merged[currentRow - 1] = true;\n                                this.addScore(this.board[currentRow - 1][col]);\n                                hasChanged = true;\n                                break;\n                            } else break;\n                        }\n                    }\n                }\n                if (hasChanged) this.spawnRandomNumber();\n                this.checkLoseCondition();\n                this.updateDOMFromBoard();\n                return hasChanged;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.state !== \"playing\") return false;\n                var hasChanged = false;\n                for(var col = 0; col < 4; col++){\n                    var merged = [\n                        false,\n                        false,\n                        false,\n                        false\n                    ];\n                    for(var row = 2; row >= 0; row--)if (this.board[row][col] !== 0) {\n                        var currentRow = row;\n                        while(currentRow < 3){\n                            if (this.board[currentRow + 1][col] === 0) {\n                                this.board[currentRow + 1][col] = this.board[currentRow][col];\n                                this.board[currentRow][col] = 0;\n                                currentRow++;\n                                hasChanged = true;\n                            } else if (this.board[currentRow + 1][col] === this.board[currentRow][col] && !merged[currentRow + 1]) {\n                                this.board[currentRow + 1][col] *= 2;\n                                this.board[currentRow][col] = 0;\n                                merged[currentRow + 1] = true;\n                                this.addScore(this.board[currentRow + 1][col]);\n                                hasChanged = true;\n                                break;\n                            } else break;\n                        }\n                    }\n                }\n                if (hasChanged) this.spawnRandomNumber();\n                this.checkLoseCondition();\n                this.updateDOMFromBoard();\n                return hasChanged;\n            }\n        },\n        {\n            key: \"handleKeyDown\",\n            value: function handleKeyDown(evt) {\n                var validKeys = [\n                    \"ArrowUp\",\n                    \"ArrowDown\",\n                    \"ArrowLeft\",\n                    \"ArrowRight\"\n                ];\n                if (!validKeys.includes(evt.key)) return;\n                switch(evt.key){\n                    case \"ArrowUp\":\n                        this.moveUp();\n                        break;\n                    case \"ArrowDown\":\n                        this.moveDown();\n                        break;\n                    case \"ArrowLeft\":\n                        this.moveLeft();\n                        break;\n                    case \"ArrowRight\":\n                        this.moveRight();\n                        break;\n                }\n            }\n        },\n        {\n            key: \"spawnRandomNumber\",\n            value: function spawnRandomNumber() {\n                var emptyCells = [];\n                // eslint-disable-next-line no-shadow\n                for(var row = 0; row < 4; row++){\n                    // eslint-disable-next-line no-shadow\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length === 0) {\n                    this.checkLoseCondition();\n                    return;\n                }\n                var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                var _emptyCells_randomIndex = emptyCells[randomIndex], row1 = _emptyCells_randomIndex.row, col1 = _emptyCells_randomIndex.col;\n                var value = Math.random() < 0.9 ? 2 : 4;\n                this.board[row1][col1] = value;\n                this.updateDOMFromBoard();\n            }\n        },\n        {\n            key: \"hideMessages\",\n            value: function hideMessages() {\n                var messageLose = document.querySelector(\".message-lose\");\n                var messageWin = document.querySelector(\".message-win\");\n                var messageStart = document.querySelector(\".message-start\");\n                if (messageLose) messageLose.classList.add(\"hidden\");\n                if (messageWin) messageWin.classList.add(\"hidden\");\n                if (messageStart) messageStart.classList.add(\"hidden\");\n            }\n        },\n        {\n            key: \"checkLoseCondition\",\n            value: function checkLoseCondition() {\n                var hasEmptyCell = this.board.flat().some(function(cell) {\n                    return cell === 0;\n                });\n                if (!hasEmptyCell) {\n                    var canMerge = this.checkPossibleMerges();\n                    if (!canMerge) {\n                        this.hideMessages();\n                        this.updateState(\"lose\");\n                        document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n                        this.gameActive = false;\n                    }\n                }\n            }\n        },\n        {\n            key: \"checkPossibleMerges\",\n            value: function checkPossibleMerges(cels) {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (col < 3 && this.board[row][col] === this.board[row][col + 1] || row < 3 && this.board[row][col] === this.board[row + 1][col]) return true;\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$button = document.querySelector(\".start\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$game.startButtonHasBeenClicked === false) $197cd56b15c33885$var$game.start();\n    else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$game.start();\n    }\n});\ndocument.addEventListener(\"keydown\", function(evt) {\n    return $197cd56b15c33885$var$game.handleKeyDown(evt);\n});\n\n})();\n//# sourceMappingURL=index.2ab3300a.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.start');\n\nbutton.addEventListener('click', () => {\n  if (game.startButtonHasBeenClicked === false) {\n    game.start();\n  } else {\n    game.restart();\n    game.start();\n  }\n});\n\ndocument.addEventListener('keydown', (evt) => game.handleKeyDown(evt));\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.score = 0;\n    this.state = 'idle';\n    this.startButtonHasBeenClicked = false;\n    this.button = document.querySelector('.start');\n\n    this.gameActive = false;\n\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  updateDOMFromBoard() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const value = this.board[row][col];\n\n        const cell = document.querySelector(\n          `.field-row:nth-child(${row + 1}) .field-cell:nth-child(${col + 1})`,\n        );\n\n        if (cell) {\n          cell.textContent = value ? value.toString() : '';\n          cell.className = `field-cell field-cell--${value || ''}`;\n        }\n      }\n    }\n\n    if (this.board.flat().includes(2048)) {\n      this.updateState('win');\n    }\n  }\n\n  updateState(newState) {\n    this.state = newState;\n  }\n\n  addScore(value) {\n    this.score += value;\n\n    const scoreElement = document.querySelector('.game-score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  initializeGame() {\n    this.score = 0;\n    this.addScore(0);\n    this.hideMessages();\n\n    const cells = document.querySelectorAll('.field-cell');\n\n    cells.forEach((cell) => {\n      cell.textContent = '';\n      cell.className = 'field-cell';\n    });\n\n    this.spawnRandomNumber();\n    this.spawnRandomNumber();\n\n    this.updateDOMFromBoard();\n  }\n\n  start() {\n    this.updateState('playing');\n    this.initializeGame();\n    this.startButtonHasBeenClicked = true;\n\n    if (this.button) {\n      this.button.textContent = 'Restart';\n      this.button.classList.remove('start');\n      this.button.classList.add('restart');\n    }\n  }\n\n  restart() {\n    this.updateState('idle');\n    this.gameActive = false;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.addScore(0);\n\n    this.hideMessages();\n    this.updateDOMFromBoard();\n\n    if (this.button) {\n      this.button.classList.remove('restart');\n      this.button.classList.add('start');\n      this.button.textContent = 'Start';\n    }\n  }\n\n  getStatus() {\n    return this.state;\n  }\n\n  moveLeft() {\n    if (this.state !== 'playing') {\n      return false;\n    }\n\n    let hasChanged = false;\n\n    for (let row = 0; row < 4; row++) {\n      const merged = [false, false, false, false];\n\n      for (let col = 1; col < 4; col++) {\n        if (this.board[row][col] !== 0) {\n          let currentCol = col;\n\n          while (currentCol > 0) {\n            if (this.board[row][currentCol - 1] === 0) {\n              this.board[row][currentCol - 1] = this.board[row][currentCol];\n              this.board[row][currentCol] = 0;\n              currentCol--;\n              hasChanged = true;\n            } else if (\n              this.board[row][currentCol - 1] === this.board[row][currentCol] &&\n              !merged[currentCol - 1]\n            ) {\n              this.board[row][currentCol - 1] *= 2;\n              this.board[row][currentCol] = 0;\n              merged[currentCol - 1] = true;\n              this.addScore(this.board[row][currentCol - 1]);\n              hasChanged = true;\n              break;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (hasChanged) {\n      this.spawnRandomNumber();\n    }\n\n    this.checkLoseCondition();\n\n    this.updateDOMFromBoard();\n\n    return hasChanged;\n  }\n\n  moveRight() {\n    if (this.state !== 'playing') {\n      return false;\n    }\n\n    let hasChanged = false;\n\n    for (let row = 0; row < 4; row++) {\n      const merged = [false, false, false, false];\n\n      for (let col = 2; col >= 0; col--) {\n        if (this.board[row][col] !== 0) {\n          let currentCol = col;\n\n          while (currentCol < 3) {\n            if (this.board[row][currentCol + 1] === 0) {\n              this.board[row][currentCol + 1] = this.board[row][currentCol];\n              this.board[row][currentCol] = 0;\n              currentCol++;\n              hasChanged = true;\n            } else if (\n              this.board[row][currentCol + 1] === this.board[row][currentCol] &&\n              !merged[currentCol + 1]\n            ) {\n              this.board[row][currentCol + 1] *= 2;\n              this.board[row][currentCol] = 0;\n              merged[currentCol + 1] = true;\n              this.addScore(this.board[row][currentCol + 1]);\n              hasChanged = true;\n              break;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (hasChanged) {\n      this.spawnRandomNumber();\n    }\n\n    this.checkLoseCondition();\n\n    this.updateDOMFromBoard();\n\n    return hasChanged;\n  }\n\n  moveUp() {\n    if (this.state !== 'playing') {\n      return false;\n    }\n\n    let hasChanged = false;\n\n    for (let col = 0; col < 4; col++) {\n      const merged = [false, false, false, false];\n\n      for (let row = 1; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          let currentRow = row;\n\n          while (currentRow > 0) {\n            if (this.board[currentRow - 1][col] === 0) {\n              this.board[currentRow - 1][col] = this.board[currentRow][col];\n              this.board[currentRow][col] = 0;\n              currentRow--;\n              hasChanged = true;\n            } else if (\n              this.board[currentRow - 1][col] === this.board[currentRow][col] &&\n              !merged[currentRow - 1]\n            ) {\n              this.board[currentRow - 1][col] *= 2;\n              this.board[currentRow][col] = 0;\n              merged[currentRow - 1] = true;\n              this.addScore(this.board[currentRow - 1][col]);\n              hasChanged = true;\n              break;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (hasChanged) {\n      this.spawnRandomNumber();\n    }\n\n    this.checkLoseCondition();\n\n    this.updateDOMFromBoard();\n\n    return hasChanged;\n  }\n\n  moveDown() {\n    if (this.state !== 'playing') {\n      return false;\n    }\n\n    let hasChanged = false;\n\n    for (let col = 0; col < 4; col++) {\n      const merged = [false, false, false, false];\n\n      for (let row = 2; row >= 0; row--) {\n        if (this.board[row][col] !== 0) {\n          let currentRow = row;\n\n          while (currentRow < 3) {\n            if (this.board[currentRow + 1][col] === 0) {\n              this.board[currentRow + 1][col] = this.board[currentRow][col];\n              this.board[currentRow][col] = 0;\n              currentRow++;\n              hasChanged = true;\n            } else if (\n              this.board[currentRow + 1][col] === this.board[currentRow][col] &&\n              !merged[currentRow + 1]\n            ) {\n              this.board[currentRow + 1][col] *= 2;\n              this.board[currentRow][col] = 0;\n              merged[currentRow + 1] = true;\n              this.addScore(this.board[currentRow + 1][col]);\n              hasChanged = true;\n              break;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (hasChanged) {\n      this.spawnRandomNumber();\n    }\n\n    this.checkLoseCondition();\n\n    this.updateDOMFromBoard();\n\n    return hasChanged;\n  }\n\n  handleKeyDown(evt) {\n    const validKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n    if (!validKeys.includes(evt.key)) {\n      return;\n    }\n\n    switch (evt.key) {\n      case 'ArrowUp':\n        this.moveUp();\n        break;\n      case 'ArrowDown':\n        this.moveDown();\n        break;\n      case 'ArrowLeft':\n        this.moveLeft();\n        break;\n      case 'ArrowRight':\n        this.moveRight();\n        break;\n    }\n  }\n\n  spawnRandomNumber() {\n    const emptyCells = [];\n\n    // eslint-disable-next-line no-shadow\n    for (let row = 0; row < 4; row++) {\n      // eslint-disable-next-line no-shadow\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      this.checkLoseCondition();\n\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row, col } = emptyCells[randomIndex];\n    const value = Math.random() < 0.9 ? 2 : 4;\n\n    this.board[row][col] = value;\n\n    this.updateDOMFromBoard();\n  }\n\n  hideMessages() {\n    const messageLose = document.querySelector('.message-lose');\n    const messageWin = document.querySelector('.message-win');\n    const messageStart = document.querySelector('.message-start');\n\n    if (messageLose) {\n      messageLose.classList.add('hidden');\n    }\n\n    if (messageWin) {\n      messageWin.classList.add('hidden');\n    }\n\n    if (messageStart) {\n      messageStart.classList.add('hidden');\n    }\n  }\n\n  checkLoseCondition() {\n    const hasEmptyCell = this.board.flat().some((cell) => cell === 0);\n\n    if (!hasEmptyCell) {\n      const canMerge = this.checkPossibleMerges();\n\n      if (!canMerge) {\n        this.hideMessages();\n        this.updateState('lose');\n        document.querySelector('.message-lose').classList.remove('hidden');\n        this.gameActive = false;\n      }\n    }\n  }\n\n  checkPossibleMerges(cels) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (\n          (col < 3 && this.board[row][col] === this.board[row][col + 1]) ||\n          (row < 3 && this.board[row][col] === this.board[row + 1][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","score","state","startButtonHasBeenClicked","button","document","querySelector","gameActive","board","handleKeyDown","bind","key","value","row","col","cell","concat","textContent","toString","className","flat","includes","updateState","newState","scoreElement","addScore","hideMessages","cells","querySelectorAll","forEach","spawnRandomNumber","updateDOMFromBoard","initializeGame","classList","remove","add","hasChanged","merged","currentCol","checkLoseCondition","currentRow","evt","validKeys","moveUp","moveDown","moveLeft","moveRight","emptyCells","push","length","randomIndex","Math","floor","random","_emptyCells_randomIndex","row1","col1","messageLose","messageWin","messageStart","some","checkPossibleMerges","cels","$4fc75ccb937ab1df$var$_defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$button","addEventListener","restart","start"],"version":3,"file":"index.2ab3300a.js.map"}